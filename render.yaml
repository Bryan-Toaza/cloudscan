# render.yaml - Render Blueprint para el despliegue de CloudScan

# Define los servicios que se desplegarán en Render
services:
  # Servicio Backend (API de FastAPI)
  - type: web # Este servicio será accesible desde Internet
    name: cloudscan-backend # Nombre único para el servicio en Render
    env: python # Entorno de ejecución: Render usará el Dockerfile en 'backend/'
    rootDir: backend # Directorio que contiene el Dockerfile y el código del backend
    # buildCommand: "" # No es necesario, Render usará el Dockerfile
    startCommand: uvicorn main:app --host 0.0.0.0 --port 8000 # Comando para iniciar la aplicación FastAPI
    ports:
      - 8000 # Puerto que la aplicación FastAPI expone dentro del contenedor

  # Servicio ClamAV (Antivirus)
  - type: worker # Este servicio correrá en segundo plano y será accesible internamente por otros servicios
    name: cloudscan-clamav # Nombre único para el servicio ClamAV
    env: docker # Entorno de ejecución: Render construirá desde el Dockerfile en 'clamav/'
    rootDir: clamav # Directorio que contiene el Dockerfile de ClamAV
    # buildCommand: "" # No es necesario, Render usará el Dockerfile
    startCommand: clamd -c /etc/clamav/clamd.conf # Comando para iniciar el demonio ClamAV
    ports:
      - 3310 # Puerto que ClamAV expone dentro del contenedor

  # Servicio Frontend (Nginx sirviendo HTML/JS/CSS)
  - type: web # Este servicio también será accesible desde Internet
    name: cloudscan-frontend # Nombre único para el servicio frontend
    env: docker # Entorno de ejecución: Render construirá desde el Dockerfile en 'frontend/'
    rootDir: frontend # Directorio que contiene el Dockerfile y los archivos del frontend
    # buildCommand: "" # No es necesario, Render usará el Dockerfile
    startCommand: nginx -g 'daemon off;' # Comando para iniciar Nginx en primer plano
    ports:
      - 80 # Puerto que Nginx expone dentro del contenedor
