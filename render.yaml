# render.yaml - Render Blueprint para el despliegue de CloudScan

# Define la versión de la especificación de Render Blueprint
services:
  # Servicio Backend (API de FastAPI)
  - type: web # Tipo de servicio: Web Service (accesible desde internet)
    name: cloudscan-backend # Nombre del servicio en Render
    env: python # Entorno de ejecución
    rootDir: backend # Directorio raíz del código para este servicio
    buildCommand: "" # El Dockerfile se encarga de la construcción
    startCommand: uvicorn main:app --host 0.0.0.0 --port 8000 # Comando para iniciar la aplicación
    healthCheckPath: / # Ruta para la verificación de salud
    ports:
      - 8000 # Puerto que expone el servicio

  # Servicio ClamAV (Antivirus)
  - type: worker # Tipo de servicio: Worker (corre en segundo plano, accesible internamente)
    name: cloudscan-clamav # Nombre del servicio en Render
    env: docker # Entorno de ejecución: Docker (construye desde Dockerfile)
    rootDir: clamav # Directorio raíz del Dockerfile para ClamAV
    buildCommand: "" # El Dockerfile se encarga de la construcción
    startCommand: clamd -c /etc/clamav/clamd.conf # Comando para iniciar el demonio ClamAV
    ports:
      - 3310 # Puerto que expone ClamAV

  # Servicio Frontend (Nginx sirviendo HTML/JS/CSS)
  - type: web # Tipo de servicio: Web Service (accesible desde internet)
    name: cloudscan-frontend # Nombre del servicio en Render
    env: docker # Entorno de ejecución: Docker (usa la imagen nginx:alpine)
    rootDir: frontend # Directorio raíz del código para el frontend
    # buildCommand: "" # No es necesario si usas la imagen nginx:alpine directamente y tienes un Dockerfile simple
    # startCommand: nginx -g 'daemon off;' # Este comando se ejecutará automáticamente si la imagen base lo tiene configurado
    ports:
      - 80 # Puerto que expone el frontend
    healthCheckPath: / # Ruta para la verificación de salud
